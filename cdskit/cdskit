#!/usr/bin/env python

import argparse
from distutils.util import strtobool

from cdskit.__init__ import __version__

# Main parser
psr = argparse.ArgumentParser(description='A toolkit for protein-coding DNA sequences in evolutionary biology')
subparsers = psr.add_subparsers()

# Parent parser for shared options
p_parent = argparse.ArgumentParser(add_help=False)
p_parent.add_argument('-s', '--seqfile', metavar='PATH', default='-', type=str, required=False, action='store',
                 help='default=%(default)s: Input sequence file. Use "-" for STDIN.')
p_parent.add_argument('-o', '--outfile', metavar='PATH', default='-', type=str, required=False, action='store',
                 help='default=%(default)s: Output sequence file. Use "-" for STDOUT.')
p_parent.add_argument('-if', '--inseqformat', metavar='STR', default='fasta', type=str, required=False, action='store',
                 help='default=%(default)s: Input sequence format. See Biopython documentation for available options.')
p_parent.add_argument('-of', '--outseqformat', metavar='STR', default='fasta', type=str, required=False, action='store',
                 help='default=%(default)s: Output sequence format. See Biopython documentation for available options.')
p_parent.add_argument('-q', '--quiet', default=False, required=False, action='store_true',
                 help='default=%(default)s: Set this if you do not want progress information from the program.')
p_parent.add_argument('-v', '--verbose', default=False, required=False, action='store_true',
                 help='default=%(default)s: Set this if you want to get more information from the program.')
p_parent.add_argument('--version', action='version', version='cdskit version ' + __version__)

p_codon = argparse.ArgumentParser(add_help=False)
p_codon.add_argument('-d', '--codontable', metavar='STR', default='Standard', type=str, required=False, action='store',
                      help='default=%(default)s: Codon table to be used. See Biopython documentation for available options.')


def command_aggregate(args):
    from cdskit.aggregate import aggregate_main
    aggregate_main(args)

p_aggregate = subparsers.add_parser('aggregate', help='see `cdskit aggregate -h`', parents=[p_parent])
p_aggregate.add_argument('-m', '--mode', metavar='STR', default='longest', type=str, required=False, action='store',
                         choices=['longest', ],
                         help='default=%(default)s: Criterion to keep a sequence during aggregation.')
p_aggregate.add_argument('-x', '--expression', metavar='REGEX', default='-', type=str, required=False, action='store',
                         nargs='+',
                         help='default=%(default)s: A regular expression to aggregate the sequences. Multiple values can be specified.')
p_aggregate.set_defaults(handler=command_aggregate)


def command_backtrim(args):
    from cdskit.backtrim import backtrim_main
    backtrim_main(args)

p_backtrim = subparsers.add_parser('backtrim', help='see `cdskit backtrim -h`', parents=[p_parent,p_codon])
p_backtrim.add_argument('-a', '--trimmed_aa_aln', metavar='PATH', default='', type=str, required=True, action='store',
                        help='default=%(default)s: PATH to the trimmed amino acid alignment. '
                             'In addition to this, please specify the untrimmed CDS alignment by --seqfile.')
p_backtrim.set_defaults(handler=command_backtrim)


def command_parsegb(args):
    from cdskit.parsegb import parsegb_main
    parsegb_main(args)

p_parsegb = subparsers.add_parser('parsegb', help='see `cdskit parsegb -h`', parents=[p_parent])
p_parsegb.add_argument('--seqnamefmt', metavar='CHAR', default='organism_accessions', type=str, required=False, action='store',
                             help='default=%(default)s: Underline-separated list of sequence name elements.')
p_parsegb.add_argument('--extract_cds', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                       help='default=%(default)s: Whether to extract the CDS feature.')
p_parsegb.set_defaults(handler=command_parsegb)


def command_hammer(args):
    from cdskit.hammer import hammer_main
    hammer_main(args)

p_hammer = subparsers.add_parser('hammer', help='see `cdskit hammer -h`', parents=[p_parent,p_codon])
p_hammer.add_argument('-n', '--nail', default=4, type=int, required=False, action='store',
                      help='default=%(default)s: Threshold number of "nail sequences" to hammer down. '
                           'Codons are removed if there are no more than this number of non-missing sequences. '
                           'For meaningful convergence analysis, this value should be 4 or more.')
p_hammer.set_defaults(handler=command_hammer)


def command_mask(args):
    from cdskit.mask import mask_main
    mask_main(args)

p_mask = subparsers.add_parser('mask', help='see `cdskit mask -h`', parents=[p_parent,p_codon])
p_mask.add_argument('-c', '--maskchar', metavar='CHAR', default='N', type=str, required=False, action='store',
                    choices=['N', '-'],
                    help='default=%(default)s: A character to be used to mask codons.')
p_mask.add_argument('-a', '--ambiguouscodon', metavar='yes|no', default='yes', type=str, required=False, action='store',
                    choices=['yes', 'no'],
                    help='default=%(default)s: Mask ambiguous codons.')
p_mask.add_argument('-t', '--stopcodon', metavar='yes|no', default='yes', type=str, required=False, action='store',
                    choices=['yes', 'no'],
                    help='default=%(default)s: Mask stop codons.')
p_mask.set_defaults(handler=command_mask)


def command_pad(args):
    from cdskit.pad import pad_main
    pad_main(args)

p_pad = subparsers.add_parser('pad', help='see `cdskit pad -h`', parents=[p_parent,p_codon])
p_pad.add_argument('-c', '--padchar', metavar='CHAR', default='N', type=str, required=False, action='store',
                   choices=['N', '-'],
                   help='default=%(default)s: A character to be used to pad when the sequence length is not multiple of three.')
p_pad.add_argument('-n', '--nopseudo', default=False, required=False, action='store_true',
                   help='default=%(default)s: Drop sequences that contain stop codon(s) even after padding to 5\'- or 3\'- terminal.')
p_pad.set_defaults(handler=command_pad)


def command_printseq(args):
    from cdskit.printseq import printseq_main
    printseq_main(args)

p_printseq = subparsers.add_parser('printseq', help='see `cdskit printseq -h`', parents=[p_parent,p_codon])
p_printseq.add_argument('-n', '--seqname', default='', type=str, required=False, action='store',
                        help='default=%(default)s: Name of the sequence to print. Regex is supported.')
p_printseq.add_argument('--show_seqname', metavar='yes|no', default='yes', type=strtobool, required=False, action='store',
                        help='default=%(default)s: Whether to show sequence name starting with ">".')

p_printseq.set_defaults(handler=command_printseq)


# Handler
args = psr.parse_args()
if hasattr(args, 'handler'):
    args.handler(args)
else:
    psr.print_help()
